# generated by datamodel-codegen:
#   filename:  openapi.yaml
#   timestamp: 2023-06-21T04:19:08+00:00

from __future__ import annotations

from typing import Annotated, Literal

from pydantic import BaseModel, Extra, Field


class Error(BaseModel):
    class Config:
        extra = Extra.forbid

    code: Literal[
        "global/unknown",
        "global/invalid-api-key",
        "global/account-inactive",
        "global/invalid-parameters",
        "global/object-does-not-exist",
        "instance-operations/launch/insufficient-capacity",
        "instance-operations/launch/file-system-in-wrong-region",
        "instance-operations/launch/file-systems-not-supported",
        "ssh-keys/key-in-use",
    ]
    """
    Unique identifier for the type of error
    """
    message: Annotated[str, Field(example="API key is invalid, expired, or deleted.")]
    """
    Detailed description of the error
    """
    suggestion: Annotated[str | None, Field(example="Create a new API key and try again.")] = None
    """
    Suggestion of possible ways to fix the error.
    """


class ErrorResponseBody(BaseModel):
    class Config:
        extra = Extra.forbid

    error: Error
    field_errors: dict[str, Error] | None = None
    """
    Details about errors on a per-parameter basis
    """


class User(BaseModel):
    """
    Information about a user in your team
    """

    class Config:
        extra = Extra.forbid

    id: Annotated[str, Field(example="0920582c7ff041399e34823a0be62549")]
    """
    Unique identifier for the user
    """
    email: Annotated[str, Field(example="teammate@example.com")]
    """
    Email address of the user
    """
    status: Literal["active", "deactivated"]
    """
    Status of the user's account
    """


class Region(BaseModel):
    class Config:
        extra = Extra.forbid

    name: Annotated[str, Field(example="us-tx-1")]
    """
    Short name of a region
    """
    description: Annotated[str, Field(example="Austin, Texas")]
    """
    Long name of a region
    """


class SshKeyName(BaseModel):
    __root__: Annotated[str, Field(example="macbook-pro", max_length=64)]
    """
    Name of the SSH key
    """


class SshKey(BaseModel):
    """
    Information about a stored SSH key, which can be used to access instances over SSH
    """

    class Config:
        extra = Extra.forbid

    id: Annotated[str, Field(example="0920582c7ff041399e34823a0be62548")]
    """
    Unique identifier (ID) of an SSH key
    """
    name: Annotated[str, Field(example="macbook-pro", max_length=64)]
    """
    Name of the SSH key
    """
    public_key: Annotated[
        str,
        Field(
            example="ssh-rsa AAAAB3NzaC1yc2EAAAADAQABAAABAQDfKpav4ILY54InZe27G user",
            max_length=4096,
        ),
    ]
    """
    Public key for the SSH key
    """
    private_key: Annotated[
        str | None,
        Field(
            example="-----BEGIN RSA PRIVATE KEY-----\nMIIEpQIBAAKCAQEA5IGybv8/wdQM6Y4yYTGiEem4TscBZiAW+9xyW2pDt8S7VDtm\n...\neCW4938W9u8N3R/kpGwi1tZYiGMLBU4Ks0qKFi/VeEaE9OLeP5WQ8Pk=\n-----END RSA PRIVATE KEY-----\n"
        ),
    ] = None
    """
    Private key for the SSH key. Only returned when generating a new key pair.
    """


class FileSystem(BaseModel):
    """
    Information about a shared file system
    """

    class Config:
        extra = Extra.forbid

    id: Annotated[str, Field(example="0920582c7ff041399e34823a0be62547")]
    """
    Unique identifier (ID) of a file system
    """
    name: Annotated[str, Field(example="shared-fs")]
    """
    Name of a file system
    """
    created: Annotated[str, Field(example="2023-02-24T20:48:56+00:00")]
    """
    A date and time, formatted as an ISO 8601 time stamp
    """
    created_by: User
    mount_point: Annotated[str, Field(example="/home/ubuntu/shared-fs")]
    """
    Absolute path indicating where on instances the file system will be mounted
    """
    region: Region
    is_in_use: bool
    """
    Whether the file system is currently in use by an instance. File systems that are in use cannot be deleted.
    """


class Specs(BaseModel):
    class Config:
        extra = Extra.forbid

    vcpus: Annotated[int, Field(example=24)]
    """
    Number of virtual CPUs
    """
    memory_gib: Annotated[int, Field(example=800)]
    """
    Amount of RAM, in gibibytes (GiB)
    """
    storage_gib: Annotated[int, Field(example=512)]
    """
    Amount of storage, in gibibytes (GiB).
    """


class InstanceType(BaseModel):
    """
    Hardware configuration and pricing of an instance type
    """

    class Config:
        extra = Extra.forbid

    name: Annotated[str, Field(example="gpu_1x_a100")]
    """
    Name of an instance type
    """
    description: Annotated[str, Field(example="1x RTX A100 (24 GB)")]
    """
    Long name of the instance type
    """
    price_cents_per_hour: Annotated[int, Field(example=110)]
    """
    Price of the instance type, in US cents per hour
    """
    specs: Specs


class Instance(BaseModel):
    """
    Virtual machine (VM) in Lambda Cloud
    """

    id: Annotated[str, Field(example="0920582c7ff041399e34823a0be62549")]
    """
    Unique identifier (ID) of an instance
    """
    name: Annotated[
        str | None, Field(example="training-node-1", max_length=64, min_length=1)
    ] = None
    """
    User-provided name for the instance
    """
    ip: Annotated[str | None, Field(example="10.10.10.1")] = None
    """
    IPv4 address of the instance
    """
    status: Literal["active", "booting", "unhealthy", "terminated"]
    """
    The current status of the instance
    """
    ssh_key_names: list[SshKeyName]
    """
    Names of the SSH keys allowed to access the instance
    """
    file_system_names: list[str]
    """
    Names of the file systems, if any, attached to the instance
    """
    region: Region | None = None
    instance_type: InstanceType | None = None
    hostname: Annotated[str | None, Field(example="10-0-8-196.cloud.lambdalabs.com")] = None
    """
    Hostname assigned to this instance, which resolves to the instance's IP.
    """
    jupyter_token: Annotated[str | None, Field(example="53968f128c4a4489b688c2c0a181d083")] = None
    """
    Secret token used to log into the jupyter lab server hosted on the instance.
    """
    jupyter_url: Annotated[
        str | None,
        Field(
            example="https://jupyter-3ac4c5c6-9026-47d2-9a33-71efccbcd0ee.lambdaspaces.com/?token=53968f128c4a4489b688c2c0a181d083"
        ),
    ] = None
    """
    URL that opens a jupyter lab notebook on the instance.
    """


class Data(BaseModel):
    class Config:
        extra = Extra.forbid

    instance_type: InstanceType
    regions_with_capacity_available: list[Region]
    """
    List of regions, if any, that have this instance type available
    """


class InstanceTypesGetResponse(BaseModel):
    class Config:
        extra = Extra.forbid

    data: Annotated[
        dict[str, Data],
        Field(
            example={
                "gpu_1x_a100": {
                    "instance_type": {
                        "name": "gpu_1x_a100",
                        "description": "1x RTX A100 (24 GB)",
                        "price_cents_per_hour": "80",
                        "specs": {"vcpus": 24, "memory_gib": 800, "storage_gib": 512},
                    },
                    "regions_with_capacity_available": [
                        {"name": "us-tx-1", "description": "Austin, Texas"}
                    ],
                },
                "gpu_4x_a6000": {
                    "instance_type": {
                        "name": "gpu_4x_a6000",
                        "description": "4x RTX 6000 (24 GB)",
                        "price_cents_per_hour": "110",
                        "specs": {"vcpus": 24, "memory_gib": 800, "storage_gib": 512},
                    },
                    "regions_with_capacity_available": [
                        {"name": "us-az-1", "description": "Phoenix, Arizona"}
                    ],
                },
            }
        ),
    ]
    """
    Dict of instance_type_name to instance_type and region availability.
    """


class InstancesGetResponse(BaseModel):
    class Config:
        extra = Extra.forbid

    data: list[Instance]


class InstancesIdGetResponse(BaseModel):
    class Config:
        extra = Extra.forbid

    data: Instance


class InstanceOperationsLaunchPostRequest(BaseModel):
    class Config:
        extra = Extra.forbid

    region_name: Annotated[str, Field(example="us-tx-1")]
    """
    Short name of a region
    """
    instance_type_name: Annotated[str, Field(example="gpu_1x_a100")]
    """
    Name of an instance type
    """
    ssh_key_names: Annotated[list[SshKeyName], Field(max_items=1, min_items=1)]
    """
    Names of the SSH keys to allow access to the instances. Currently, exactly one SSH key must be specified.
    """
    file_system_names: Annotated[list[str] | None, Field(max_items=1)] = None
    """
    Names of the file systems to attach to the instances. Currently, only one (if any) file system may be specified.
    """
    quantity: Annotated[int, Field(ge=1, le=1)] = 1
    """
    Number of instances to launch
    """
    name: Annotated[
        str | None, Field(example="training-node-1", max_length=64, min_length=1)
    ] = None
    """
    User-provided name for the instance
    """


class Data1(BaseModel):
    class Config:
        extra = Extra.forbid

    instance_ids: list[str]
    """
    The unique identifiers (IDs) of the launched instances. Note: if a quantity was specified, fewer than the requested quantity might have been launched.
    """


class InstanceOperationsLaunchPostResponse(BaseModel):
    class Config:
        extra = Extra.forbid

    data: Data1


class InstanceOperationsTerminatePostRequest(BaseModel):
    class Config:
        extra = Extra.forbid

    instance_ids: list[str]
    """
    The unique identifiers (IDs) of the instances to terminate
    """


class Data2(BaseModel):
    class Config:
        extra = Extra.forbid

    terminated_instances: list[Instance]
    """
    List of instances that were terminated. Note: this list might not contain all instances requested to be terminated.
    """


class InstanceOperationsTerminatePostResponse(BaseModel):
    class Config:
        extra = Extra.forbid

    data: Data2


class InstanceOperationsRestartPostRequest(BaseModel):
    class Config:
        extra = Extra.forbid

    instance_ids: list[str]
    """
    The unique identifiers (IDs) of the instances to restart
    """


class Data3(BaseModel):
    class Config:
        extra = Extra.forbid

    restarted_instances: list[Instance]
    """
    List of instances that were restarted. Note: this list might not contain all instances requested to be restarted.
    """


class InstanceOperationsRestartPostResponse(BaseModel):
    class Config:
        extra = Extra.forbid

    data: Data3


class SshKeysGetResponse(BaseModel):
    class Config:
        extra = Extra.forbid

    data: list[SshKey]


class SshKeysPostRequest(BaseModel):
    """
    The name for the SSH key. Optionally, an existing public key can be supplied for the `public_key` property. If the `public_key` property is omitted, a new key pair is generated. The private key is returned in the response.
    """

    class Config:
        extra = Extra.forbid

    name: Annotated[str, Field(example="macbook-pro", max_length=64)]
    """
    Name of the SSH key
    """
    public_key: Annotated[
        str | None,
        Field(
            example="ssh-rsa AAAAB3NzaC1yc2EAAAADAQABAAABAQDfKpav4ILY54InZe27G user",
            max_length=4096,
        ),
    ] = None
    """
    Public key for the SSH key
    """


class SshKeysPostResponse(BaseModel):
    """
    The added or generated SSH public key. If a new key pair was generated, the response body contains a `private_key` property that *must* be saved locally. Lambda Cloud does not store private keys.
    """

    class Config:
        extra = Extra.forbid

    data: SshKey


class FileSystemsGetResponse(BaseModel):
    class Config:
        extra = Extra.forbid

    data: list[FileSystem]
